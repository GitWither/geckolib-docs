{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installing To use the library in a dev environment, add this to your build.gradle file. For forge users, you have to make a new repositories block . Otherwise, your build will fail. Do not add the repository to the buildscript section of your gradle. For Forge 1.15.2: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { implementation fg . deobf ( 'software.bernie.geckolib:forge-1.15.2-geckolib:2.0.0' ) } For Forge 1.16.*: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { implementation fg . deobf ( 'software.bernie.geckolib:forge-1.16.3-geckolib:2.1.1' ) } For Forge 1.12.2: minecraft { useDepAts = true } repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { deobfCompile ( 'software.bernie.geckolib:forge-1.12.2-geckolib:2.0.2' ) } For Fabric 1.15.2: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { modImplementation \"software.bernie.geckolib:fabric-1.15.2-geckolib:2.0.0:dev\" } For Fabric 1.16.2: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { modImplementation \"software.bernie.geckolib:fabric-1.16.2-geckolib:2.0.0:dev\" } Installing the Plugin In order to use blockbench (bedrock) animations in forge, you'll need to install the Geckolib blockbench plugin. You can find it by going to File -> Plugins -> Available -> Search for \"GeckoLib Animation Utils\" . Keep in mind the plugin is only available for BlockBench 3.6+, so make sure to fix it. Video Tutorial If you prefer videos to written documentation, TurtyWurty made a great Geckolib 2.0 Tutorial to walk you through how to rig, animate, and code: Creating a Model In order to create a model compatible with Geckolib, you should create a new Animated Entity Model in blockbench, by going to File -> New Animated Java Entity. Converting an Existing Model If you have already created a bedrock or normal java entity, you can convert it to an Animated Entity Model compatible with Geckolib by going to File -> Convert Project -> Select \"Animated Java Entity\" . Keep in mind that if you're converting from a bedrock model to a java model, there are occasionally hiccups in the model conversion process since the models are stored in different file formats. You'll have to either fix these issues manually or consult the blockbench discord. Rigging The process of preparing a model for animation is known as \"rigging\". You can think of it as the process of creating a skeleton for your model. Spending a little time rigging makes the animation process much easier. Grouping In entity models, you cannot rotate cubes, only groups. So, click the \"add group\" button and make sure all your cubes are inside group \"folders\": Parenting and Pivots The rig for a model is like a skeleton. Groups are the bones, pivots are the joints, and cubes are the flesh. Unless your model has multiple object parts that can move independently (like if your entity was a school of fish), you probably want a single root group with many nested child groups. When each group moves, it also moves it's children. Pivot points can be set using the pivot tool and affect what point a group pivots from when it rotates. This is easier to explain visually so you can watch this video showing how to set up parenting and pivots for a simple skeleton: These images are from the article Minecraft Modeling & Texturing Tips by MasterianoX . You can read it for more detail and lots more helpful modeling tips. Animating You can animate your model in the Animation tab on the right. Geckolib currently supports position, scale, and rotation keyframes. Support for sound, particle, and custom event keyframes is in development. It's also important that you set the loop setting to the appropriate value for each animation in the editor. This will determine if the animation will loop in game. You can set this value by right-clicking the animation in the Animation Pane and selecting loop. Animating in GeckoLib is almost exactly the same as how you would animate for a bedrock entity, so most bedrock animation tutorials also apply to GeckoLib. Animation Concepts Ideally, animations should be split up as much as possible. Geckolib allows you to run multiple animations simultaneously, so in order to make the smoothest transitions, you should split up each logical animation. For example, if you're making a flying creature with several flying types, several running types, and several head movements, you should split each one into it's own animation and combine them in code. In this example, you should make these animations in blockbench (examples): * Default Head Movement Animation * Spitting Head Animation * Wing Flapping Animation (only involving wings) * Faster Wing Flapping Animation (only involving wings) * Running Animation (only involving legs) * Walking Animation (only involving legs) This is different to the normal way most people animate. Usually, you would animate the entire body at once and duplicate it + adjust keyframes. This can certainly work, but it will provide for a less seamless transition period in between animations. Additionally, the modular system Geckolib encourages allows for more possible animation combinations and a greater control for the developer. (2.0) Working with easing curves GeckoLib 2.0 added a powerful new feature called easing curves. These allow you to create smooth, natural-looking animations with less effort than previously. In Bedrock and GeckoLib 1.0, the only type of \"tweening\" or interpolation that could be used between keyframes was linear interpolation, or \"lerp\". This means that as time progresses forwards, the value would change from the starting keyframe to the next keyframe at a constant speed. Real objects don't usually move in this way, they tend to need to accelerate a bit when starting and decelerate when stopping. An easing curve is a mathematical function that can allow for animations to be interpolated in a more gradual fashion. The value of the \"tween\" at any given point in time is taken from the given easing curve rather than a straight line. This allows you to easily achieve effects like a smooth start and stop, an object overshooting its destination and sliding back into place (back curve), or an object bouncing (bounce curve). Source: 1ucasvb . Note some curve names differ from ours but the principles are the same. In addition, there are three directions a curve can be applied. \"In\" usually means the curve is applied focusing on the beginning of the interpolation, focusing on a smooth-looking start. \"Out\" usually means the curve is applied focusing on the end of the interpolation (the reverse of \"In\"), focusing on a smooth-looking end. \"InOut\" means the curve is symmetrically applied to both the start and end. In the animation above, when the animation plays from left to right it corresponds to \"In\", and when it plays backwards/right to left it corresponds to \"Out\". See below for a comparison: Source: Prototypr We implemented all of the easing curves from easings.net and recommend you check out that website for an interactive, animated explanation of all the different curves and directions. We also added a default \"linear\" curve to emulate bedrock behavior, and a \"step\" curve which snaps the value to a specified number of steps instead of moving smoothly. This can be used to animate things like clock hands or simulate a reduced framerate. In addition, we created arguments for the \"back\", \"elastic\", and \"bounce\" curves to give you additional control over their shapes. In GeckoLib, we use the right-hand or \"to\" keyframe to specify the easing for each tween. Therefore, there is no easing curve on the first keyframe in any timeline. You need to make a second keyframe in order to assign an easing curve . Eliot also made a code sandbox to explore the different curves and see the effect of the adjustment parameters for ones that have them. Feel free to play around with it if you find it helpful. Here's a short demo of how to use the easing curves editor: Exporting Your Model After you finish making your model in Blockbench, you need to export both the .java entity model and the .json animation file. You can export the model by going to File -> Export -> Export Animated Java Entity. You can export the animation json file by going to Animation -> Export Animations (2.0) Animated Entity Settings Window GeckoLib 2.0 added an Animated Entity Settings Window which can be accessed from the File menu for Animated Java Entity projects: This can be used to customize the Java code template so that you can export many times if needed without having to manually edit the code afterwards. These settings are completely optional, you can just edit the code by hand still if you prefer. Setting Description Modding SDK Choose which Modding SDK and version you are using so code will be generated in the correct format. Entity Type The fully qualified type name of your Entity which will be supplied as the type parameter to the model's superclass, AnimatedEntityModel , ex. com.example.mymod.entities.MyEntity Java Package The Java package you want your model to be in, ex. com.example.mymod.models Animation File Namespace The namespace where your animation file resource is in. This should probably be your mod ID, ex. mymod . Animation File Path The path to the animation file inside the namespace, ex. animations/my_animation.json . Read Next To add your model and animation in game, read how to do so here.","title":"Getting Started"},{"location":"#installing","text":"To use the library in a dev environment, add this to your build.gradle file. For forge users, you have to make a new repositories block . Otherwise, your build will fail. Do not add the repository to the buildscript section of your gradle. For Forge 1.15.2: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { implementation fg . deobf ( 'software.bernie.geckolib:forge-1.15.2-geckolib:2.0.0' ) } For Forge 1.16.*: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { implementation fg . deobf ( 'software.bernie.geckolib:forge-1.16.3-geckolib:2.1.1' ) } For Forge 1.12.2: minecraft { useDepAts = true } repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { deobfCompile ( 'software.bernie.geckolib:forge-1.12.2-geckolib:2.0.2' ) } For Fabric 1.15.2: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { modImplementation \"software.bernie.geckolib:fabric-1.15.2-geckolib:2.0.0:dev\" } For Fabric 1.16.2: repositories { maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' } } dependencies { modImplementation \"software.bernie.geckolib:fabric-1.16.2-geckolib:2.0.0:dev\" }","title":"Installing"},{"location":"#installing-the-plugin","text":"In order to use blockbench (bedrock) animations in forge, you'll need to install the Geckolib blockbench plugin. You can find it by going to File -> Plugins -> Available -> Search for \"GeckoLib Animation Utils\" . Keep in mind the plugin is only available for BlockBench 3.6+, so make sure to fix it.","title":"Installing the Plugin"},{"location":"#video-tutorial","text":"If you prefer videos to written documentation, TurtyWurty made a great Geckolib 2.0 Tutorial to walk you through how to rig, animate, and code:","title":"Video Tutorial"},{"location":"#creating-a-model","text":"In order to create a model compatible with Geckolib, you should create a new Animated Entity Model in blockbench, by going to File -> New Animated Java Entity.","title":"Creating a Model"},{"location":"#converting-an-existing-model","text":"If you have already created a bedrock or normal java entity, you can convert it to an Animated Entity Model compatible with Geckolib by going to File -> Convert Project -> Select \"Animated Java Entity\" . Keep in mind that if you're converting from a bedrock model to a java model, there are occasionally hiccups in the model conversion process since the models are stored in different file formats. You'll have to either fix these issues manually or consult the blockbench discord.","title":"Converting an Existing Model"},{"location":"#rigging","text":"The process of preparing a model for animation is known as \"rigging\". You can think of it as the process of creating a skeleton for your model. Spending a little time rigging makes the animation process much easier.","title":"Rigging"},{"location":"#grouping","text":"In entity models, you cannot rotate cubes, only groups. So, click the \"add group\" button and make sure all your cubes are inside group \"folders\":","title":"Grouping"},{"location":"#parenting-and-pivots","text":"The rig for a model is like a skeleton. Groups are the bones, pivots are the joints, and cubes are the flesh. Unless your model has multiple object parts that can move independently (like if your entity was a school of fish), you probably want a single root group with many nested child groups. When each group moves, it also moves it's children. Pivot points can be set using the pivot tool and affect what point a group pivots from when it rotates. This is easier to explain visually so you can watch this video showing how to set up parenting and pivots for a simple skeleton: These images are from the article Minecraft Modeling & Texturing Tips by MasterianoX . You can read it for more detail and lots more helpful modeling tips.","title":"Parenting and Pivots"},{"location":"#animating","text":"You can animate your model in the Animation tab on the right. Geckolib currently supports position, scale, and rotation keyframes. Support for sound, particle, and custom event keyframes is in development. It's also important that you set the loop setting to the appropriate value for each animation in the editor. This will determine if the animation will loop in game. You can set this value by right-clicking the animation in the Animation Pane and selecting loop. Animating in GeckoLib is almost exactly the same as how you would animate for a bedrock entity, so most bedrock animation tutorials also apply to GeckoLib.","title":"Animating"},{"location":"#animation-concepts","text":"Ideally, animations should be split up as much as possible. Geckolib allows you to run multiple animations simultaneously, so in order to make the smoothest transitions, you should split up each logical animation. For example, if you're making a flying creature with several flying types, several running types, and several head movements, you should split each one into it's own animation and combine them in code. In this example, you should make these animations in blockbench (examples): * Default Head Movement Animation * Spitting Head Animation * Wing Flapping Animation (only involving wings) * Faster Wing Flapping Animation (only involving wings) * Running Animation (only involving legs) * Walking Animation (only involving legs) This is different to the normal way most people animate. Usually, you would animate the entire body at once and duplicate it + adjust keyframes. This can certainly work, but it will provide for a less seamless transition period in between animations. Additionally, the modular system Geckolib encourages allows for more possible animation combinations and a greater control for the developer.","title":"Animation Concepts"},{"location":"#20-working-with-easing-curves","text":"GeckoLib 2.0 added a powerful new feature called easing curves. These allow you to create smooth, natural-looking animations with less effort than previously. In Bedrock and GeckoLib 1.0, the only type of \"tweening\" or interpolation that could be used between keyframes was linear interpolation, or \"lerp\". This means that as time progresses forwards, the value would change from the starting keyframe to the next keyframe at a constant speed. Real objects don't usually move in this way, they tend to need to accelerate a bit when starting and decelerate when stopping. An easing curve is a mathematical function that can allow for animations to be interpolated in a more gradual fashion. The value of the \"tween\" at any given point in time is taken from the given easing curve rather than a straight line. This allows you to easily achieve effects like a smooth start and stop, an object overshooting its destination and sliding back into place (back curve), or an object bouncing (bounce curve). Source: 1ucasvb . Note some curve names differ from ours but the principles are the same. In addition, there are three directions a curve can be applied. \"In\" usually means the curve is applied focusing on the beginning of the interpolation, focusing on a smooth-looking start. \"Out\" usually means the curve is applied focusing on the end of the interpolation (the reverse of \"In\"), focusing on a smooth-looking end. \"InOut\" means the curve is symmetrically applied to both the start and end. In the animation above, when the animation plays from left to right it corresponds to \"In\", and when it plays backwards/right to left it corresponds to \"Out\". See below for a comparison: Source: Prototypr We implemented all of the easing curves from easings.net and recommend you check out that website for an interactive, animated explanation of all the different curves and directions. We also added a default \"linear\" curve to emulate bedrock behavior, and a \"step\" curve which snaps the value to a specified number of steps instead of moving smoothly. This can be used to animate things like clock hands or simulate a reduced framerate. In addition, we created arguments for the \"back\", \"elastic\", and \"bounce\" curves to give you additional control over their shapes. In GeckoLib, we use the right-hand or \"to\" keyframe to specify the easing for each tween. Therefore, there is no easing curve on the first keyframe in any timeline. You need to make a second keyframe in order to assign an easing curve . Eliot also made a code sandbox to explore the different curves and see the effect of the adjustment parameters for ones that have them. Feel free to play around with it if you find it helpful. Here's a short demo of how to use the easing curves editor:","title":"(2.0) Working with easing curves"},{"location":"#exporting-your-model","text":"After you finish making your model in Blockbench, you need to export both the .java entity model and the .json animation file. You can export the model by going to File -> Export -> Export Animated Java Entity. You can export the animation json file by going to Animation -> Export Animations","title":"Exporting Your Model"},{"location":"#20-animated-entity-settings-window","text":"GeckoLib 2.0 added an Animated Entity Settings Window which can be accessed from the File menu for Animated Java Entity projects: This can be used to customize the Java code template so that you can export many times if needed without having to manually edit the code afterwards. These settings are completely optional, you can just edit the code by hand still if you prefer. Setting Description Modding SDK Choose which Modding SDK and version you are using so code will be generated in the correct format. Entity Type The fully qualified type name of your Entity which will be supplied as the type parameter to the model's superclass, AnimatedEntityModel , ex. com.example.mymod.entities.MyEntity Java Package The Java package you want your model to be in, ex. com.example.mymod.models Animation File Namespace The namespace where your animation file resource is in. This should probably be your mod ID, ex. mymod . Animation File Path The path to the animation file inside the namespace, ex. animations/my_animation.json .","title":"(2.0) Animated Entity Settings Window"},{"location":"#read-next","text":"To add your model and animation in game, read how to do so here.","title":"Read Next"},{"location":"Animation-Controllers/","text":"Animation Controllers GeckoLib is able to mix and match animations, play multiple simultaneously, and smoothly transition between animations. Animation Controllers are what make this possible. Each Animation Controller should represent a logical animation category. For instance, if you want your entity to have a walking animation, an arm animation, and a head animation, you should split it up into as many Animation Controllers as possible. Although this may seem counter intuitive, you give yourself much more control by being able to mix and match animations whenever you want. Transition Lengths Each Animation Controller has a transition length property, which determines how many ticks it takes to transition from one animation to another. You can also change this property during an AnimationPredicate , to dynamically change how long it takes to transition between animations. Limitations Even though GeckoLib allows you to play multiple animations at the same time, you must take care to never play two Animations that involve the same bone properties at the same time. For example, say you have two bones, Bone A and Bone B. You CAN : * Play two unrelated animations, one on each bone * Play one animation that changes Bone A's rotation and Bone B's Position * Play one animation that changes Bone A's rotation, and a different animation that changes Bone A's position/scale You CANNOT : * Play one animation that changes Bone A's position, and a different animation that also changes Bone A's position Each Animation Controller can only play one animation at a time, however you can assign entire queues of animations to an Animation Controller, so you can play one Animation after another, after another, after another, etc. This can be accomplished using Animation Builders. Animation Builders Animation Builders follow the builder pattern. This means that every method returns an instance of this class. You can stack method calls, like this: AnimationBuilder jumpAnimationBuilder = new AnimationBuilder (). addAnimation ( \"jump\" ). addRepeatingAnimation ( \"run\" , \"5\" ); jumpController . setAnimation ( jumpAnimationBuilder ); AnimationBuilder exposes several methods to set animations. addAnimation(String animationName) - Adds a single animation to the builder addAnimation(String animationName, Boolean shouldLoop) - Adds a single animation and overrides the loop setting on that animation. addRepeatingAnimation(String animationName, int timesToRepeat) - Adds a single animation to the queue several times. This is useful if you want to run a single animation several times, and then run a different animation afterwards. You can of course just run addAnimation several times. After creating your AnimationBuilder , you need to assign it to the AnimationController . You can do this with AnimationController#setAnimation(AnimationBuilder builder) . You should run this client side, and usually in the AnimationPredicate. This method can be run every tick, and the animation won't be restarted every tick . It's also important that the name of the animation you set is exactly the same as in the json file. Sometimes the name of the animation in the json file is not the same as in blockbench Full Example of using an AnimationBuilder inside an AnimationPredicate : private < ENTITY extends Entity > boolean moveController ( AnimationTestEvent < ENTITY > entityAnimationTestEvent ) { moveController . transitionLength = 10 ; if ( KeyboardHandler . isQDown ) { moveController . setAnimation ( new AnimationBuilder (). addAnimation ( \"tigris.spitfly\" , false ). addAnimation ( \"tigris.sit\" , false ). addAnimation ( \"tigris.sit\" , false ). addAnimation ( \"tigris.run\" , false ). addAnimation ( \"tigris.run\" , false ). addAnimation ( \"tigris.sleep\" , true )); } else { moveController . setAnimation ( new AnimationBuilder (). addAnimation ( \"tigris.fly\" )); } return true ; }","title":"Animation Controllers"},{"location":"Animation-Controllers/#animation-controllers","text":"GeckoLib is able to mix and match animations, play multiple simultaneously, and smoothly transition between animations. Animation Controllers are what make this possible. Each Animation Controller should represent a logical animation category. For instance, if you want your entity to have a walking animation, an arm animation, and a head animation, you should split it up into as many Animation Controllers as possible. Although this may seem counter intuitive, you give yourself much more control by being able to mix and match animations whenever you want.","title":"Animation Controllers"},{"location":"Animation-Controllers/#transition-lengths","text":"Each Animation Controller has a transition length property, which determines how many ticks it takes to transition from one animation to another. You can also change this property during an AnimationPredicate , to dynamically change how long it takes to transition between animations.","title":"Transition Lengths"},{"location":"Animation-Controllers/#limitations","text":"Even though GeckoLib allows you to play multiple animations at the same time, you must take care to never play two Animations that involve the same bone properties at the same time. For example, say you have two bones, Bone A and Bone B. You CAN : * Play two unrelated animations, one on each bone * Play one animation that changes Bone A's rotation and Bone B's Position * Play one animation that changes Bone A's rotation, and a different animation that changes Bone A's position/scale You CANNOT : * Play one animation that changes Bone A's position, and a different animation that also changes Bone A's position Each Animation Controller can only play one animation at a time, however you can assign entire queues of animations to an Animation Controller, so you can play one Animation after another, after another, after another, etc. This can be accomplished using Animation Builders.","title":"Limitations"},{"location":"Animation-Controllers/#animation-builders","text":"Animation Builders follow the builder pattern. This means that every method returns an instance of this class. You can stack method calls, like this: AnimationBuilder jumpAnimationBuilder = new AnimationBuilder (). addAnimation ( \"jump\" ). addRepeatingAnimation ( \"run\" , \"5\" ); jumpController . setAnimation ( jumpAnimationBuilder ); AnimationBuilder exposes several methods to set animations. addAnimation(String animationName) - Adds a single animation to the builder addAnimation(String animationName, Boolean shouldLoop) - Adds a single animation and overrides the loop setting on that animation. addRepeatingAnimation(String animationName, int timesToRepeat) - Adds a single animation to the queue several times. This is useful if you want to run a single animation several times, and then run a different animation afterwards. You can of course just run addAnimation several times. After creating your AnimationBuilder , you need to assign it to the AnimationController . You can do this with AnimationController#setAnimation(AnimationBuilder builder) . You should run this client side, and usually in the AnimationPredicate. This method can be run every tick, and the animation won't be restarted every tick . It's also important that the name of the animation you set is exactly the same as in the json file. Sometimes the name of the animation in the json file is not the same as in blockbench Full Example of using an AnimationBuilder inside an AnimationPredicate : private < ENTITY extends Entity > boolean moveController ( AnimationTestEvent < ENTITY > entityAnimationTestEvent ) { moveController . transitionLength = 10 ; if ( KeyboardHandler . isQDown ) { moveController . setAnimation ( new AnimationBuilder (). addAnimation ( \"tigris.spitfly\" , false ). addAnimation ( \"tigris.sit\" , false ). addAnimation ( \"tigris.sit\" , false ). addAnimation ( \"tigris.run\" , false ). addAnimation ( \"tigris.run\" , false ). addAnimation ( \"tigris.sleep\" , true )); } else { moveController . setAnimation ( new AnimationBuilder (). addAnimation ( \"tigris.fly\" )); } return true ; }","title":"Animation Builders"},{"location":"Animation-Managers/","text":"Entity Animation Managers Each entity should have exactly one animation manager. There are a few things you can control with animation managers. Changing animation speeds You can adjust how fast an entire entity is playing its animation using EntityAnimationManager#setAnimationSpeed(). Setting this value to 0 will make the animation freeze. Setting this value to 1 will make the animation play at default speed. Unfortunately, there's currently no way to adjust an individual AnimationController's speed, and you can only adjust the entire entity's speed. Changing reset speeds If you return false in an AnimationPredicate , all the bones that were part of that animation will slowly move back to their original state defined in blockbench. If you want to change how long it takes for the bones to get back to their original state, use EntityAnimationManager#setResetSpeedInTicks().","title":"Animation Managers"},{"location":"Animation-Managers/#entity-animation-managers","text":"Each entity should have exactly one animation manager. There are a few things you can control with animation managers.","title":"Entity Animation Managers"},{"location":"Animation-Managers/#changing-animation-speeds","text":"You can adjust how fast an entire entity is playing its animation using EntityAnimationManager#setAnimationSpeed(). Setting this value to 0 will make the animation freeze. Setting this value to 1 will make the animation play at default speed. Unfortunately, there's currently no way to adjust an individual AnimationController's speed, and you can only adjust the entire entity's speed.","title":"Changing animation speeds"},{"location":"Animation-Managers/#changing-reset-speeds","text":"If you return false in an AnimationPredicate , all the bones that were part of that animation will slowly move back to their original state defined in blockbench. If you want to change how long it takes for the bones to get back to their original state, use EntityAnimationManager#setResetSpeedInTicks().","title":"Changing reset speeds"},{"location":"Credits/","text":"GeckoLib was developed mostly by me, Gecko. Several other people contributed assets, art, and code. Thank you to these people: Enormous thank you to Eliot Lash for the help porting to fabric, work on the geckolib blockbench plugin, and easing implementation. The Ult1mate Guy, NerevarDZN, Slumberous Carp, and Lewbae for the assets and designs","title":"Credits"},{"location":"Examples/","text":"Examples To see some examples, feel free to look through the several test entities GeckoLib adds. Currently, we have: Ascended Legfish - Has two animation controllers, one to control it's size (has a growing animation), and one to control it's movement (has a walking, kicking, and punchwalking animation). The legfish grows to its bigger size when you punch it. Stingray - Has one animation controller, which changes animation based on the current downfall state. If it's raining it plays one animation, if it's not it plays a different one. Flying Tigris - Has two animation controllers, and showcases more features of AnimationBuilders. Credit for these models go to these individuals respectively: The Ult1mate Guy Slumberous Carp Lewbae","title":"Examples"},{"location":"Examples/#examples","text":"To see some examples, feel free to look through the several test entities GeckoLib adds. Currently, we have: Ascended Legfish - Has two animation controllers, one to control it's size (has a growing animation), and one to control it's movement (has a walking, kicking, and punchwalking animation). The legfish grows to its bigger size when you punch it. Stingray - Has one animation controller, which changes animation based on the current downfall state. If it's raining it plays one animation, if it's not it plays a different one. Flying Tigris - Has two animation controllers, and showcases more features of AnimationBuilders. Credit for these models go to these individuals respectively: The Ult1mate Guy Slumberous Carp Lewbae","title":"Examples"},{"location":"Home/","text":"Welcome to the GeckoLib wiki! Learn how to get started by reading https://github.com/bernie-g/geckolib/wiki/Getting-Started","title":"Home"},{"location":"Miscellaneous-Features/","text":"Overriding Animations There are several instances where you'll want to override parts of an animation completely. GeckoLib allows you to change several parts of your animation at runtime. Overriding Looping There are three places you can change this setting. Listed in priority of highest to lowest: 1. AnimationController#loopByDefault 2. animatinoBuilder.addAnimation(\"animation\", true) where true represents that the animation should loop 3. \"loop\" = true in the animation json file. This can be configured in blockbench by right clicking your animation and selecting loop. This image explains how GeckoLib determines if an animation should loop. Overriding Easing By default, GeckoLib takes the easing type from each keyframe in the json file and applies them individually. However, you can also override this functionality for an entire AnimationController by setting it's easingType to one of the EasingType enums. To disable this overriding behavior, set it to EasingType.NONE . Custom Easing Curves If for some reason you want to make a completely new easing curve that isn't included in blockbench, GeckoLib allows you to do this. This can be accomplished by setting AnimationController#easingType = EasingType.CUSTOM , and registering your custom easing function to AnimationController#customEasingMethod = this::easingMethod . This function takes a decimal between 0 to 1 as input and returns another decimal representing the lerp value the program should use. Take a look at EasingManager for more info. Hot Reloading GeckoLib provides a simple command to hot swap animation files. Simply change your animation file, rebuild your project in your IDE, and execute /geckolib reload Sounds GeckoLib has support for sound keyframes from blockbench. To adjust the volume, pitch, and distance delay of the sounds played, adjust the fields in your AnimationController.","title":"Miscellaneous Features"},{"location":"Miscellaneous-Features/#overriding-animations","text":"There are several instances where you'll want to override parts of an animation completely. GeckoLib allows you to change several parts of your animation at runtime.","title":"Overriding Animations"},{"location":"Miscellaneous-Features/#overriding-looping","text":"There are three places you can change this setting. Listed in priority of highest to lowest: 1. AnimationController#loopByDefault 2. animatinoBuilder.addAnimation(\"animation\", true) where true represents that the animation should loop 3. \"loop\" = true in the animation json file. This can be configured in blockbench by right clicking your animation and selecting loop. This image explains how GeckoLib determines if an animation should loop.","title":"Overriding Looping"},{"location":"Miscellaneous-Features/#overriding-easing","text":"By default, GeckoLib takes the easing type from each keyframe in the json file and applies them individually. However, you can also override this functionality for an entire AnimationController by setting it's easingType to one of the EasingType enums. To disable this overriding behavior, set it to EasingType.NONE .","title":"Overriding Easing"},{"location":"Miscellaneous-Features/#custom-easing-curves","text":"If for some reason you want to make a completely new easing curve that isn't included in blockbench, GeckoLib allows you to do this. This can be accomplished by setting AnimationController#easingType = EasingType.CUSTOM , and registering your custom easing function to AnimationController#customEasingMethod = this::easingMethod . This function takes a decimal between 0 to 1 as input and returns another decimal representing the lerp value the program should use. Take a look at EasingManager for more info.","title":"Custom Easing Curves"},{"location":"Miscellaneous-Features/#hot-reloading","text":"GeckoLib provides a simple command to hot swap animation files. Simply change your animation file, rebuild your project in your IDE, and execute /geckolib reload","title":"Hot Reloading"},{"location":"Miscellaneous-Features/#sounds","text":"GeckoLib has support for sound keyframes from blockbench. To adjust the volume, pitch, and distance delay of the sounds played, adjust the fields in your AnimationController.","title":"Sounds"},{"location":"Sounds%2C-Particles%2C-and-Custom-Instruction-Keyframes/","text":"Effect Keyframes GeckoLib supports more than just model animation. You can add sound keyframes to trigger sounds at specific points in an animation, particles to display effects, and custom instruction keyframes to add your own custom event data to animations. To enable this feature in blockbench, click Animation -> Animate Effects . You'll see a new animation panel pop up in the animator. From here, you can add global keyframes to your model. Sound Keyframes GeckoLib handles sounds automatically. All you have to do is subscribe to the sound listener using AnimationController#registerSoundListener() and return your SoundEvent based on the event's data. You can see an example of a sound listener in the tigris entity. Particle Keyframes GeckoLib doesn't do any extra work for particles. However, you can still subscribe to the particle listener and do your own particle rendering if you'd like. This process is exactly the same as for sound keyframes. (If you actually use this feature and do something cool with it I'd love to see it in action). You can see an example of a particle listener in the easing demo entity. Custom Instruction Keyframes Custom instructions are useful for non-sound and non-particle things you want to do to your entity at a specific time in your keyframe. This can be anything, from rendering a hat, to sending a chat message. You can see an example of a custom instruction listener in the easing demo entity.","title":"Sounds, Particles, and Custom Keyframes"},{"location":"Sounds%2C-Particles%2C-and-Custom-Instruction-Keyframes/#effect-keyframes","text":"GeckoLib supports more than just model animation. You can add sound keyframes to trigger sounds at specific points in an animation, particles to display effects, and custom instruction keyframes to add your own custom event data to animations. To enable this feature in blockbench, click Animation -> Animate Effects . You'll see a new animation panel pop up in the animator. From here, you can add global keyframes to your model.","title":"Effect Keyframes"},{"location":"Sounds%2C-Particles%2C-and-Custom-Instruction-Keyframes/#sound-keyframes","text":"GeckoLib handles sounds automatically. All you have to do is subscribe to the sound listener using AnimationController#registerSoundListener() and return your SoundEvent based on the event's data. You can see an example of a sound listener in the tigris entity.","title":"Sound Keyframes"},{"location":"Sounds%2C-Particles%2C-and-Custom-Instruction-Keyframes/#particle-keyframes","text":"GeckoLib doesn't do any extra work for particles. However, you can still subscribe to the particle listener and do your own particle rendering if you'd like. This process is exactly the same as for sound keyframes. (If you actually use this feature and do something cool with it I'd love to see it in action). You can see an example of a particle listener in the easing demo entity.","title":"Particle Keyframes"},{"location":"Sounds%2C-Particles%2C-and-Custom-Instruction-Keyframes/#custom-instruction-keyframes","text":"Custom instructions are useful for non-sound and non-particle things you want to do to your entity at a specific time in your keyframe. This can be anything, from rendering a hat, to sending a chat message. You can see an example of a custom instruction listener in the easing demo entity.","title":"Custom Instruction Keyframes"},{"location":"Troubleshooting/","text":"Troubleshooting Occasionally you may run into issues with GeckoLib. Before submitting an issue, please read through this page first. Animation isn't playing - Check the console for logs, make sure GeckoLib is able to find the path to your animation file and the animation name's you are specifying are exactly what they are in the json file. Additionally, make sure you actually registered your AnimationController to your AnimationControllerCollection. Put a breakpoint in your AnimationPredicate and make sure it's actually being run. Read more about this here. Animation only plays once - Make sure that you set your animation to loop in blockbench. You can always use the overload of AnimationBuilder#setAnimation() that takes a loop parameter. This will override the loop value set in blockbench. Additionally, you can also set AnimatedEntityModel#loopByDefault = true , which will make every animation loop by default. Animations take too long/too short to transition - Make sure your transition length is in ticks. You can change this value in the AnimationController constructor or by setting the field directly. Bytecode not matching/IllegalAccessException/ATs not working For 1.15 forge, make sure you have fg.deobf(\"url\") . Otherwise, forge won't remap geckolib to your current mappings. If you are using 1.12, you'll have to use ForgeGradle 2. We're not sure why it doesn't work on 1.12 FG 3, but there is little to no official support for 1.12 anyway. For forge 1.12, make sure you have this in your minecraft block: minecraft { useDepAts = true } If you still have problems, feel free to ask in our discord or make a github issue.","title":"Troubleshooting"},{"location":"Troubleshooting/#troubleshooting","text":"Occasionally you may run into issues with GeckoLib. Before submitting an issue, please read through this page first. Animation isn't playing - Check the console for logs, make sure GeckoLib is able to find the path to your animation file and the animation name's you are specifying are exactly what they are in the json file. Additionally, make sure you actually registered your AnimationController to your AnimationControllerCollection. Put a breakpoint in your AnimationPredicate and make sure it's actually being run. Read more about this here. Animation only plays once - Make sure that you set your animation to loop in blockbench. You can always use the overload of AnimationBuilder#setAnimation() that takes a loop parameter. This will override the loop value set in blockbench. Additionally, you can also set AnimatedEntityModel#loopByDefault = true , which will make every animation loop by default. Animations take too long/too short to transition - Make sure your transition length is in ticks. You can change this value in the AnimationController constructor or by setting the field directly. Bytecode not matching/IllegalAccessException/ATs not working For 1.15 forge, make sure you have fg.deobf(\"url\") . Otherwise, forge won't remap geckolib to your current mappings. If you are using 1.12, you'll have to use ForgeGradle 2. We're not sure why it doesn't work on 1.12 FG 3, but there is little to no official support for 1.12 anyway. For forge 1.12, make sure you have this in your minecraft block: minecraft { useDepAts = true } If you still have problems, feel free to ask in our discord or make a github issue.","title":"Troubleshooting"},{"location":"Using-Your-Animations/","text":"Adding Animated Entities Into Your Mod Base Setup Adding an entity with GeckoLib is very similar to how you would normally do it in a forge mod. You need to create a model, renderer, and entity class, register the entity using either a deferred registry or the normal registry events, and register the renderer using RenderingRegistry . registerEntityRenderingHandler () , or your mod loader's equivalent. Model GeckoLib requires some extra stuff in the model class than the usual things you would do in forge. First, you add the exported .java model into your mod, and add all the required imports/replace the entity names with your own entity. The GeckoLib blockbench plugin also generates the getAnimationFileLocation () method, where you should replace the ResourceLocation with a path to your json animation file (exported from blockbench). Renderer Every entity needs it's own renderer, and GeckoLib makes no changes to how EntityRenderer's work. Here is an example EntityRenderer from GeckoLib's test entities: @OnlyIn ( Dist . CLIENT ) public class TigrisRenderer extends MobRenderer < TigrisEntity , TigrisModel > { public TigrisRenderer ( EntityRendererManager rendererManager ) { super ( rendererManager , new TigrisModel (), 0.5F ); } @Nullable @Override public ResourceLocation getEntityTexture ( TigrisEntity entity ) { return new ResourceLocation ( \"geckolib\" + \":textures/model/entity/tigris.png\" ); } @Override protected void applyRotations ( TigrisEntity entityLiving , MatrixStack matrixStackIn , float ageInTicks , float rotationYaw , float partialTicks ) { super . applyRotations ( entityLiving , matrixStackIn , ageInTicks , rotationYaw , partialTicks ); } } Entity The entity class is where most of the animation controlling code will be located. There are several things you need to do to the entity class in order to get up and running with GeckoLib: Implement IAnimatedEntity Create a field of type EntityAnimationManager . To learn more about animation manager's see the wiki page Create as many EntityAnimationController 's as you need, declaring each as a field. Override getAnimationManager() , and return your EntityAnimationManager . Create a method registerAnimationControllers() where you add all your EntityAnimationController s to your EntityAnimationManager , and call this method in the entity constructor. If you don't call this method in the constructor, none of your animations will play. Animation Predicates Every render frame, GeckoLib will process every EntityAnimationController and execute it's associated AnimationPredicate . An Animation Predicate is where you should set your animations, stop them, and transition between them. Feel free to run the AnimationController#setAnimation() method every tick, it won't restart the animation unless you change the Animation being run. Additionally, if you want to stop the animation from executing, you'll need to return false . If you want the animation to continue executing, return true . Keep in mind, if you return false, GeckoLib won't instantly stop the animation. Instead, the bones will slowly interpolate back to the model's original state . You can read more about this behavior here. Example Entity Class public class RobotEntity extends AnimalEntity implements IAnimatedEntity { EntityAnimationManager manager = new EntityAnimationManager (); EntityAnimationController controller = new EntityAnimationController ( this , \"walkController\" , 20 , this :: animationPredicate ); private < E extends Entity > boolean animationPredicate ( AnimationTestEvent < E > event ) { controller . setAnimation ( new AnimationBuilder (). addAnimation ( \"walk\" )); return true ; } public RobotEntity ( EntityType <? extends AnimalEntity > type , World worldIn ) { super ( type , worldIn ); manager . addAnimationController ( controller ); } @Nullable @Override public AgeableEntity createChild ( AgeableEntity ageable ) { return null ; } @Override public EntityAnimationManager getAnimationManager () { return manager ; } }","title":"Using Your Animations"},{"location":"Using-Your-Animations/#adding-animated-entities-into-your-mod","text":"","title":"Adding Animated Entities Into Your Mod"},{"location":"Using-Your-Animations/#base-setup","text":"Adding an entity with GeckoLib is very similar to how you would normally do it in a forge mod. You need to create a model, renderer, and entity class, register the entity using either a deferred registry or the normal registry events, and register the renderer using RenderingRegistry . registerEntityRenderingHandler () , or your mod loader's equivalent.","title":"Base Setup"},{"location":"Using-Your-Animations/#model","text":"GeckoLib requires some extra stuff in the model class than the usual things you would do in forge. First, you add the exported .java model into your mod, and add all the required imports/replace the entity names with your own entity. The GeckoLib blockbench plugin also generates the getAnimationFileLocation () method, where you should replace the ResourceLocation with a path to your json animation file (exported from blockbench).","title":"Model"},{"location":"Using-Your-Animations/#renderer","text":"Every entity needs it's own renderer, and GeckoLib makes no changes to how EntityRenderer's work. Here is an example EntityRenderer from GeckoLib's test entities: @OnlyIn ( Dist . CLIENT ) public class TigrisRenderer extends MobRenderer < TigrisEntity , TigrisModel > { public TigrisRenderer ( EntityRendererManager rendererManager ) { super ( rendererManager , new TigrisModel (), 0.5F ); } @Nullable @Override public ResourceLocation getEntityTexture ( TigrisEntity entity ) { return new ResourceLocation ( \"geckolib\" + \":textures/model/entity/tigris.png\" ); } @Override protected void applyRotations ( TigrisEntity entityLiving , MatrixStack matrixStackIn , float ageInTicks , float rotationYaw , float partialTicks ) { super . applyRotations ( entityLiving , matrixStackIn , ageInTicks , rotationYaw , partialTicks ); } }","title":"Renderer"},{"location":"Using-Your-Animations/#entity","text":"The entity class is where most of the animation controlling code will be located. There are several things you need to do to the entity class in order to get up and running with GeckoLib: Implement IAnimatedEntity Create a field of type EntityAnimationManager . To learn more about animation manager's see the wiki page Create as many EntityAnimationController 's as you need, declaring each as a field. Override getAnimationManager() , and return your EntityAnimationManager . Create a method registerAnimationControllers() where you add all your EntityAnimationController s to your EntityAnimationManager , and call this method in the entity constructor. If you don't call this method in the constructor, none of your animations will play.","title":"Entity"},{"location":"Using-Your-Animations/#animation-predicates","text":"Every render frame, GeckoLib will process every EntityAnimationController and execute it's associated AnimationPredicate . An Animation Predicate is where you should set your animations, stop them, and transition between them. Feel free to run the AnimationController#setAnimation() method every tick, it won't restart the animation unless you change the Animation being run. Additionally, if you want to stop the animation from executing, you'll need to return false . If you want the animation to continue executing, return true . Keep in mind, if you return false, GeckoLib won't instantly stop the animation. Instead, the bones will slowly interpolate back to the model's original state . You can read more about this behavior here.","title":"Animation Predicates"},{"location":"Using-Your-Animations/#example-entity-class","text":"public class RobotEntity extends AnimalEntity implements IAnimatedEntity { EntityAnimationManager manager = new EntityAnimationManager (); EntityAnimationController controller = new EntityAnimationController ( this , \"walkController\" , 20 , this :: animationPredicate ); private < E extends Entity > boolean animationPredicate ( AnimationTestEvent < E > event ) { controller . setAnimation ( new AnimationBuilder (). addAnimation ( \"walk\" )); return true ; } public RobotEntity ( EntityType <? extends AnimalEntity > type , World worldIn ) { super ( type , worldIn ); manager . addAnimationController ( controller ); } @Nullable @Override public AgeableEntity createChild ( AgeableEntity ageable ) { return null ; } @Override public EntityAnimationManager getAnimationManager () { return manager ; } }","title":"Example Entity Class"},{"location":"_Sidebar/","text":"Home Getting Started Animations Animation Controllers Animation Managers Sounds, Particles, and Custom Keyframes Examples Miscellaneous Features Troubleshooting Credits","title":" Sidebar"}]}